t ::= true
    | false
    | if t then t else t
    | t + t
    | t - t
    | t * t
    | t / t (0, pred t, succ t 수정)
    | iszero t          -- chapter 3 arithmetic expressions
    | x
    | lambda x:T.t
    | t t               -- chapter 9 simply typed lambda calculus
    | unit
    | t as T
    | {t, t}
    | t.1
    | t.2
    | {ti} (1 <= i <= n)
    | t.i
    | {li = ti} (1 <= i <= n)
    | t.l
    | let p = t in t
    | inl t
    | inr t
    | case t of inl x => t | inr x => t
    | inl t as T
    | inr t as T
    | <l=t> as T
    | case t of <li=xi> => ti (1 <= i <= n)
    | fix t
    | nil [T]
    | cons [T] t t
    | isnil[T] t
    | head[T] t
    | tail[T] t         -- chapter 11 simple extensions
    | ref t
    | !t
    | t := t
    | l                 -- chapter 13 references
    | error
    | try t with t
    | raise t
    | try t with t      -- chapter 14 exceptions

p ::= x
    | {li = ti} (1 <= i <= n)

T ::= T -> T
    | A
    | Unit
    | T1 * T2
    | {Ti} (1 <= i <= n)
    | {li:Ti} (1 <= i <= n)
    | T+T
    | <li:Ti> (1 <= i <= n)
    | List T
    | Ref T